/*
 * testovi.cpp
 *
 *  Created on: May 11, 2019
 *      Author: OS1
 */

#include "thread.h"
#include "KernelS.h"
#include <iostream.h>
#include <stdio.h>
#include "IVTEnt.h"
#include "KernEv.h"
#include <stdarg.h>

extern Thread* running;
extern int requested_context_switch;
extern int context_switch_disabled;

#define Semaphore KernelSem
void interrupt timer_interrupt(...);
#define lock context_switch_disabled++;
#define unlock if(context_switch_disabled){context_switch_disabled--; if(!context_switch_disabled) if(requested_context_switch)timer_interrupt();};

int syncPrintf(const char *format, ...)
 {
	int res;
	va_list args;
	lock;
va_start(args, format);
res = vprintf(format, args);
va_end(args); unlock;
return res; }




const int n = 10;
int count = 100;
Semaphore mutex(1);

int mutex_glb = 1;

void mutex_glb_wait(){
 sloop:asm{
	mov ax, 0
	xchg ax, mutex_glb
}
 if(_AX ==0){
	timer_interrupt();
	asm jmp sloop;
 }
}


#define intLock mutex_glb_wait();
#define intUnlock mutex_glb = 1;


class BoundedBuffer {
public:

	BoundedBuffer (unsigned size);
	virtual ~BoundedBuffer ();
	int append (char);
	char take ();
	int  fullCount(){return itemAvailable.value();};    // potrebno consumeru

private:
	unsigned Size;
	Semaphore mutexa, mutext;
	Semaphore spaceAvailable, itemAvailable;
	char* buffer;
	int head, tail;

};

BoundedBuffer::BoundedBuffer (unsigned size) : Size(size),
	mutexa(1), mutext(1), spaceAvailable(size), itemAvailable(0),
	head(0), tail(0) {
		buffer = new char[size];
		if (!buffer) exit(1);
	}

BoundedBuffer::~BoundedBuffer(){
	intLock
	delete [] buffer;
	intUnlock
}

int BoundedBuffer::append (char d) {
	spaceAvailable.wait(0);
	mutexa.wait(0);
		buffer[tail] = d;
		tail = (tail+1)%Size;
	mutexa.signal();
	itemAvailable.signal();
	return 0;
}

char BoundedBuffer::take () {
	itemAvailable.wait(0);
	mutext.wait(0);
		char d = buffer[head];
		head = (head+1)%Size;
	mutext.signal();
	spaceAvailable.signal();
	return d;
}

BoundedBuffer buffer(n/2);

class Producer: public Thread
{
public:
	Producer(): Thread() {};
	~Producer()
	{
		waitToComplete();
	}

protected:
	void run()
	{
		char c;
		while(count>0)
		{
			c = 65+(rand()%25);
			buffer.append(c);
			syncPrintf("%d. Producer %d puts '%c'\n",count,Thread::getRunningId(),c);
			mutex.wait(0);
			count--;
			mutex.signal();
		}
	}
};

class Consumer: public Thread
{
public:
	Consumer(): Thread() {};
	~Consumer()
	{
		waitToComplete();
	}

protected:
	void run()
	{
		char c;
		while(count>0)
		{
			c = buffer.take();
			syncPrintf("%d. Consumer %d gets '%c'\n",count,Thread::getRunningId(),c);
			mutex.wait(0);
			count--;
			mutex.signal();
		}
	}
};

void tick(){}

int userMain(int argc, char** argv)
{
	syncPrintf("Test starts.\n");
	Producer p;
	Consumer c;
	p.start();
	c.start();
	syncPrintf("Test ends.\n");
	return 0;
}


/*class NitA:public Thread{

public:
	NitA():Thread(512,2){}
	virtual void run(){
		for(int i = 0;i<10000;i++){
			//lock
					//cout<<"Nit a\n";
			//unlock

		if(i==7)i=0;
		}
	}

};






Thread* temp=new NitA();


class NitB:public Thread{

public:
	NitB():Thread(512,3){}
	virtual void run(){
		for(int i = 0;i<10000;i++){
		//	lock
		//	cout<<"Nit B\n";
		//	unlock
			if(i==7)i=0;

		}
	}

};






int UserMain(){


  lock
	cout<<"usao\n";
  unlock;
NitA* a=new NitA();

//cout<<"aa\n";
  NitB* b= new NitB();

lock
  cout<<"b\n";
unlock
  a->start();
  lock
 cout<<"astart\n";

unlock
   //for(int i=0;i<10000;i++){


//requested_context_switch=1;

//timer_interrupt();
  b->start();
  a->waitToComplete();//promeni ovo,kako da cekas niti ???
  b->waitToComplete();




return 0;
}

*/

