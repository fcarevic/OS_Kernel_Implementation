/*
 * testovi.cpp
 *
 *  Created on: May 11, 2019
 *      Author: OS1
 */

#include "thread.h"
#include "KernelS.h"
#include <iostream.h>
#include <stdio.h>
#include "IVTEnt.h"
#include "KernEv.h"
#include <stdarg.h>
#include <stdlib.h>

extern Thread* running;
extern int requested_context_switch;
extern int context_switch_disabled;

#define Semaphore KernelSem
void interrupt timer_interrupt(...);
#define lock context_switch_disabled++;
#define unlock if(context_switch_disabled){context_switch_disabled--; if(!context_switch_disabled) if(requested_context_switch)timer_interrupt();};

int syncPrintf(const char *format, ...)
 {
	int res;
	va_list args;
	lock;
va_start(args, format);
res = vprintf(format, args);
va_end(args); unlock;
return res; }



int t=-1;

Semaphore s(0);

class TestThread : public Thread
{
private:
	Time waitTime;

public:

	TestThread(Time WT): Thread(), waitTime(WT){}
	~TestThread()
	{
		waitToComplete();
	}
protected:

	void run();

};

void TestThread::run()
{
	syncPrintf("Thread %d waits for %d units of time.\n",getId(),waitTime);
	int r = s.wait(waitTime);
	s.signal();
	syncPrintf("Thread %d finished: r = %d\n", getId(),r);
}

void tick()
{
	/*
	t++;
	if(t)
		syncPrintf("%d\n",t);
		*/
}


#include <iostream.h>

Semaphore* mutex = 0;

class Znak : public Thread
{
public:
	Znak(char znak, int n) : Thread(), znak(znak), n(n) {}
	virtual ~Znak() { waitToComplete(); }

	void run()
	{
		for (long i = 0; i < 100000; i++)
		{
			if (mutex->wait(n)) {
				cout << znak;
				mutex->signal();
			}

		}

		if (mutex->wait(n)) {
			cout << endl << znak << " finished" << endl;
			mutex->signal();
		}
	}

private:
	char znak;
	int n;

};


int userMain(int argc, char* argv[]) {
	mutex = new Semaphore(1);

	Znak* a = new Znak('a', 10);
	Znak* b = new Znak('b', 15);
	Znak* c = new Znak('c', 20);

	a->start();
	b->start();
	c->start();

	delete a;
	delete b;
	delete c;

	if (mutex->wait(1)) {
		cout << endl << "userMain finished" << endl;
		mutex->signal();
	}

	delete mutex;



	return 0;
}

/*class NitA:public Thread{

public:
	NitA():Thread(512,2){}
	virtual void run(){
		for(int i = 0;i<10000;i++){
			//lock
					//cout<<"Nit a\n";
			//unlock

		if(i==7)i=0;
		}
	}

};






Thread* temp=new NitA();


class NitB:public Thread{

public:
	NitB():Thread(512,3){}
	virtual void run(){
		for(int i = 0;i<10000;i++){
		//	lock
		//	cout<<"Nit B\n";
		//	unlock
			if(i==7)i=0;

		}
	}

};






int UserMain(){


  lock
	cout<<"usao\n";
  unlock;
NitA* a=new NitA();

//cout<<"aa\n";
  NitB* b= new NitB();

lock
  cout<<"b\n";
unlock
  a->start();
  lock
 cout<<"astart\n";

unlock
   //for(int i=0;i<10000;i++){


//requested_context_switch=1;

//timer_interrupt();
  b->start();
  a->waitToComplete();//promeni ovo,kako da cekas niti ???
  b->waitToComplete();




return 0;
}

*/

