/*
 * testovi.cpp
 *
 *  Created on: May 11, 2019
 *      Author: OS1
 */

#include "thread.h"
#include "KernelS.h"
#include <iostream.h>
#include <stdio.h>
#include "IVTEnt.h"
#include "KernEv.h"

extern Thread* running;
extern int requested_context_switch;
extern int context_switch_disabled;


void interrupt timer_interrupt(...);
#define lock context_switch_disabled++;
#define unlock if(context_switch_disabled){context_switch_disabled--; if(!context_switch_disabled) if(requested_context_switch)timer_interrupt();};

void syncPrintf(char* s, unsigned i=0){
	lock
	printf(s,i);
	unlock

}
volatile Time ts;

void tick()
{
	syncPrintf("timeSlice=%d\n",ts);
}

class TestThread : public Thread
{
private:
	Time myTimeSlice;
public:

	TestThread(StackSize stackSize, Time timeSlice): Thread(stackSize,timeSlice), myTimeSlice(timeSlice) {};
	~TestThread()
	{
		waitToComplete();
	}
protected:

	void run();

};

void TestThread::run()
{
	for(unsigned i=0;i<32000;i++)
	{
		for(unsigned int j=0;j<32000;j++)
		{
			ts = myTimeSlice;
		}
	}
}


int userMain(int argc, char** argv)
{
	syncPrintf("Test starts.\n");
	TestThread t1(64,1), t2(4096,32), t3(1024,16), t4(4096,0);
	t1.start();
	t2.start();
	t3.start();
	t4.start();
	t1.waitToComplete();
	t2.waitToComplete();
	t3.waitToComplete();
	t4.waitToComplete();
	syncPrintf("Test ends.\n");
	return 0;
}


/*class NitA:public Thread{

public:
	NitA():Thread(512,2){}
	virtual void run(){
		for(int i = 0;i<10000;i++){
			//lock
					//cout<<"Nit a\n";
			//unlock

		if(i==7)i=0;
		}
	}

};






Thread* temp=new NitA();


class NitB:public Thread{

public:
	NitB():Thread(512,3){}
	virtual void run(){
		for(int i = 0;i<10000;i++){
		//	lock
		//	cout<<"Nit B\n";
		//	unlock
			if(i==7)i=0;

		}
	}

};






int UserMain(){


  lock
	cout<<"usao\n";
  unlock;
NitA* a=new NitA();

//cout<<"aa\n";
  NitB* b= new NitB();

lock
  cout<<"b\n";
unlock
  a->start();
  lock
 cout<<"astart\n";

unlock
   //for(int i=0;i<10000;i++){


//requested_context_switch=1;

//timer_interrupt();
  b->start();
  a->waitToComplete();//promeni ovo,kako da cekas niti ???
  b->waitToComplete();




return 0;
}

*/

